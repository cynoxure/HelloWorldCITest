name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  p1: ' -A x64 -DVCPKG_TARGET_TRIPLET=x64-windows '
  p2: ' -DASPN_INCLUDE_DIR=C:/DEV/aspn-v2-lcm-build-vra/cpp '
  p3: ' -DCMAKE_CXX_FLAGS=\"/DWIN32 /D_WINDOWS /W3 /GR /EHsc\" -DCMAKE_CXX_FLAGS_RELEASE=\"/MD /O2 /Ob2 /DNDEBUG\" -DCMAKE_CXX_FLAGS_DEBUG=\"/MDd /Zi /Ob0 /Od /RTC1\" '
  p4: ' -DCMAKE_C_FLAGS=\"/DWIN32 /D_WINDOWS /W3\" -DCMAKE_C_FLAGS_RELEASE=\"/MD /O2 /Ob2 /DNDEBUG\" -DCMAKE_C_FLAGS_DEBUG=\"/MDd /Zi /Ob0 /Od /RTC1\" '
  p5: ' -DCMAKE_EXE_LINKER_FLAGS=\"/machine:x64\" -DCMAKE_EXE_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" -DCMAKE_EXE_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" '
  p6: ' -DCMAKE_MODULE_LINKER_FLAGS=\"/machine:x64\" -DCMAKE_MODULE_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" -DCMAKE_MODULE_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" '
  p7: ' -DCMAKE_RC_FLAGS=\"-DWIN32\" -DCMAKE_RC_FLAGS_DEBUG=\"-D_DEBUG\"  -DCMAKE_SHARED_LINKER_FLAGS=\"/machine:x64\" -DCMAKE_SHARED_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" '
  p8: ' -DCMAKE_SHARED_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" -DCMAKE_STATIC_LINKER_FLAGS=\"/machine:x64\" -DCMAKE_VERBOSE_MAKEFILE=OFF '
  p9: ' -DBUILD_GEOSPATIAL=OFF -DBUILD_DEMOS=OFF -DBUILD_RTKLIB_CMD_LINE=OFF -DENABLE_GPSTK=OFF -DENABLE_SYNTHETIC_TESTS=OFF '
  p10: ' -DCPACK_BINARY_IFW=ON -DCPACK_BINARY_NSIS=OFF -DCPACK_IFW_VERBOSE=ON -DCPACK_SOURCE_7Z=OFF -DCPACK_SOURCE_ZIP=OFF '
  p11: ' -DBUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON '

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
    #- uses: actions/checkout@v2
    - name: Checkout
      uses: actions/checkout@v1
      with:
          submodules: recursive

    - name: Download Doxygen
      working-directory: ${{ runner.workspace }}
      shell: pwsh
      run: |
        Invoke-WebRequest `
          -Uri "http://doxygen.nl/files/doxygen-1.8.20.windows.x64.bin.zip"  `
          -OutFile "doxygen-1.8.20.windows.x64.bin.zip"
        Expand-Archive `
          -Path "doxygen-1.8.20.windows.x64.bin.zip"  `
          -Destination "doxygen"
        Remove-Item doxygen-1.8.20.windows.x64.bin.zip

    - name: Download QtIFW
      working-directory: ${{ runner.workspace }}
      shell: pwsh
      run: |
        Invoke-WebRequest `
          -Uri "http://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_ifw/qt.tools.ifw.40/4.0ifw-win-x86.7z" `
          -OutFile "ifw-install.7z"
        7z x -o${{ runner.workspace }}\QtIFW ifw-install.7z
        Remove-Item ifw-install.7z
    
    - name: Get vcpkg 2020.07 
      working-directory: C:\vcpkg
      run: |
        git fetch --tags
        git checkout 2020.07
        C:\vcpkg\vcpkg.exe update
        C:\vcpkg\vcpkg.exe upgrade
        C:\vcpkg\bootstrap-vcpkg.bat
        C:\vcpkg\vcpkg.exe integrate install

    # - name: Installing pcre - needs debug fro some reason (windows)
    #   working-directory: ${{ runner.workspace }}
    #   run: |
    #     C:\vcpkg\vcpkg.exe install --triplet x64-windows pcre

    - name: Set vcpkg (release only)
      working-directory: C:\vcpkg
      run: |
        Add-Content -Path .\triplets\x64-windows.cmake -Value 'set(VCPKG_BUILD_TYPE release)' 
        Get-Content -Path .\triplets\x64-windows.cmake

    - name: Installing eigen (windows)
      working-directory: ${{ runner.workspace }}
      run: |
        C:\vcpkg\vcpkg.exe install --triplet x64-windows eigen3

    # - name: Pull Repos
    #   # Use a bash shell so we can use the same syntax for environment variable
    #   # access regardless of the host operating system
    #   # shell: bash
    #   # ${{ runner.workspace }}
    #   working-directory: ${{ runner.workspace }}
    #   # Note the current convention is to use the -S and -B options here to specify source 
    #   # and build directories, but this is only available with CMake 3.13 and higher.  
    #   # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
    #   run: |
    #     git clone https://vethresearch:${{ secrets.VRA_REPO_CLONE_TOKEN }}@github.com/vethresearch/solverframework.git 
    #     git clone --depth 1 -b 2011 https://vethresearch:${{ secrets.VRA_REPO_CLONE_TOKEN }}@github.com/vethresearch/image_tracking_library.git
    #     git clone -b 2011 https://gitlab+deploy-token-290381:${{ secrets.NAVLIB_GITLAB_TOKEN }}@gitlab.com/vra/navigation_library.git 
    #     git clone https://vethresearch:${{ secrets.VRA_REPO_CLONE_TOKEN }}@github.com/vethresearch/aspn-v2-lcm-build-vra.git 
    #     cd aspn-v2-lcm-build-vra
    #     git checkout -t remotes/origin/nativebuild

    # - name: List
    #   working-directory: ${{ runner.workspace }}
    #   shell: pwsh
    #   run: |
    #     ls C:/vcpkg/scripts/buildsystems
    #     ls C:/vcpkg/installed/x64-windows/share/e*
    #     ls C:/vcpkg/installed/x64-windows/share/eigen3
    #     ls ${{ github.workspace }}
    #     ls ${{ runner.workspace }}
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC'
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/'
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/'
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx64/'
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx64/x64/'
    #     ls C:/
    #     ls 'C:/Program Files'

    # - name: Prep Navlib Build (windows)
    #   working-directory: ${{ runner.workspace }}/navigation_library
    #   run: |
    #     cmake -E make_directory ${{ runner.workspace }}/navigation_library/build

    # - name: Build Navlib (windows)
    #   working-directory: ${{ runner.workspace }}/navigation_library/build
    #   shell: bash
    #   run: |
    #     cmake $p1 $p2 -DCMAKE_CONFIGURATION_TYPES=\"$BUILD_TYPE\" $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 -DCPACK_IFW_ROOT=${{ runner.workspace }}/QtIFW/Tools/QtInstallerFramework/4.0 $p11 -DCMAKE_INSTALL_PREFIX=${{ runner.workspace }}/vra_navigation_library .. 
        
#        .\vcpkg install --triplet x64-windows qt5[activeqt,core,declarative,imageformats,networkauth,svg,tools] 
    # - name: Installing vcpkg (windows)
    #   working-directory: ${{ runner.workspace }}
    #   run: |
    #     C:\vcpkg\vcpkg.exe install --triplet x64-windows date ceres[eigensparse] yaml-cpp lcm libwebp glib glog gflags glew glfw3 dirent
    #     C:\vcpkg\vcpkg.exe install --triplet x64-windows opencv[png,jpeg,tiff,webp,eigen,nonfree,contrib]

    # - name: Prep Navlib Build (windows)
    #   working-directory: ${{ runner.workspace }}/navigation_library
    #   run: |
    #     cmake -E make_directory ${{ runner.workspace }}/navigation_library/build

# -DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/scripts/buildsystems/vcpkg.cmake \
    # - name: CMake Navlib (windows)
    #   working-directory: ${{ runner.workspace }}/navigation_library/build
    #   shell: bash
    #   run: |
    #     cmake $p1 $p2 -DCMAKE_CONFIGURATION_TYPES=$BUILD_TYPE $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 -DCPACK_IFW_ROOT=\"${{ runner.workspace }}/QtIFW/Tools/QtInstallerFramework/4.0\" $p11 -DCMAKE_INSTALL_PREFIX=\"${{ runner.workspace }}/vra_navigation_library\" .. 
        
    # - name: Build Navlib (windows)
    #   working-directory: ${{ runner.workspace }}/navigation_library/build
    #   shell: bash
    #   run: |
    #     cmake --build . --config $BUILD_TYPE 
        
    # - name: Install Navlib (windows)
    #   working-directory: ${{ runner.workspace }}/navigation_library/build
    #   shell: bash
    #   run: |
    #     cmake --install . --config $BUILD_TYPE 
        
    - name: Create Build Environment
      working-directory: ${{ github.workspace }}
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      #shell: pwsh
      #shell: bash
      working-directory: ${{ github.workspace }}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
          # -DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/vcpkg/scripts/buildsystems/vcpkg.cmake \
          # -G "\"Visual Studio 16 2019\"" \
      run: |
        cmake  -DCMAKE_TOOLCHAIN_FILE:FILEPATH=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON $env:p1 .. 
      # $p2 $p3 $p4 $p5 $p6 $p7 $p8 $p9 $p10 -DCPACK_IFW_ROOT=\"${{ runner.workspace }}/QtIFW/Tools/QtInstallerFramework/4.0\"
            
    - name: Build Solution (windows)
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE 

    - name: Package Solution (windows)
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -t PACKAGE

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: CMakeHelloWorld-Installer
        path: ${{github.workspace}}/build/*.exe
        retention-days: 5
