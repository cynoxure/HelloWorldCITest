name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  IFW_MAJOR: "4"
  IFW_MINOR: "0"
  IFW_INSTALLER: "4.0ifw-win-x86.7z"

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
    #- uses: actions/checkout@v2
    - name: Checkout
      uses: actions/checkout@v1
      with:
          submodules: recursive

    - name: Download Doxygen
      working-directory: ${{ runner.workspace }}
      shell: pwsh
      run: |
        Invoke-WebRequest `
          -Uri "http://doxygen.nl/files/doxygen-1.8.20.windows.x64.bin.zip"  `
          -OutFile "doxygen-1.8.20.windows.x64.bin.zip"
        Expand-Archive `
          -Path "doxygen-1.8.20.windows.x64.bin.zip"  `
          -Destination "doxygen"
        Remove-Item doxygen-1.8.20.windows.x64.bin.zip

    - name: Download Doxygen
      working-directory: ${{ runner.workspace }}
      shell: pwsh
      run: |
        Invoke-WebRequest `
          -Uri "http://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_ifw/qt.tools.ifw."+${{IFW_MAJOR}}+${{IFW_MINOR}}+"/"+${{IFW_INSTALLER}} `
          -OutFile "ifw-install.7z"
        Expand-Archive `
          -Path ifw-install.7z `
          -Destination "ifw"
        Remove-Item ifw-install.7z
    
    - name: Pull Repos
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      # shell: bash
      # ${{ runner.workspace }}
      working-directory: ${{ runner.workspace }}
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: |
        git clone https://vethresearch:${{ secrets.VRA_REPO_CLONE_TOKEN }}@github.com/vethresearch/aspn-v2-lcm-build-vra.git 
        cd aspn-v2-lcm-build-vra
        git checkout -t remotes/origin/nativebuild
        cd ..
        git clone https://vethresearch:${{ secrets.VRA_REPO_CLONE_TOKEN }}@github.com/vethresearch/solverframework.git 
        cd solverframework
        git checkout master
        git clone --depth 1 -b 2011 https://vethresearch:${{ secrets.VRA_REPO_CLONE_TOKEN }}@github.com/vethresearch/image_tracking_library.git
        git clone -b 2011 https://gitlab+deploy-token-290381:${{ secrets.NAVLIB_GITLAB_TOKEN }}@gitlab.com/vra/navigation_library.git 

    # - name: List
    #   working-directory: ${{ runner.workspace }}
    #   shell: pwsh
    #   run: |
    #     ls C:/
    #     ls 'C:/Program Files'
    #     ls 'C:/Program Files (x86)'
    
#        .\vcpkg install --triplet x64-windows qt5[activeqt,core,declarative,imageformats,networkauth,svg,tools] 
    - name: Installing vcpkg (windows)
      working-directory: ${{ runner.workspace }}
      run: |
        C:\vcpkg\vcpkg.exe install --triplet x64-windows date ceres[eigensparse] yaml-cpp lcm eigen3 libwebp pcre glib glog gflags glew glfw3 dirent
        C:\vcpkg\vcpkg.exe install --triplet x64-windows opencv[png,jpeg,tiff,webp,eigen,nonfree,contrib]

    - name: Prep Navlib Build (windows)
      working-directory: ${{ runner.workspace }}/navigation_library
      run: |
        git checkout -t feature/multi_vehicle_nav_est 
        cmake -E make_directory build

# -DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/scripts/buildsystems/vcpkg.cmake \
    - name: Build Navlib (windows)
      working-directory: ${{ runner.workspace }}/navigation_library/build
      run: |
        cmake \
          -G \"Visual Studio 16 2019\" \
          -A x64 \
          -DVCPKG_TARGET_TRIPLET=x64-windows \
          -DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DASPN_INCLUDE_DIR=C:/DEV/aspn-v2-lcm-build-vra/cpp \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_CONFIGURATION_TYPES=$BUILD_TYPE \
          -DCMAKE_CXX_FLAGS=\"/DWIN32 /D_WINDOWS /W3 /GR /EHsc\" \
          -DCMAKE_CXX_FLAGS_RELEASE=\"/MD /O2 /Ob2 /DNDEBUG\" \
          -DCMAKE_CXX_FLAGS_DEBUG=\"/MDd /Zi /Ob0 /Od /RTC1\" \
          -DCMAKE_C_FLAGS=\"/DWIN32 /D_WINDOWS /W3\" \
          -DCMAKE_C_FLAGS_RELEASE=\"/MD /O2 /Ob2 /DNDEBUG\" \
          -DCMAKE_C_FLAGS_DEBUG=\"/MDd /Zi /Ob0 /Od /RTC1\" \
          -DCMAKE_EXE_LINKER_FLAGS=\"/machine:x64\" \
          -DCMAKE_EXE_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" \
          -DCMAKE_EXE_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" \
          -DCMAKE_MODULE_LINKER_FLAGS=\"/machine:x64\" \
          -DCMAKE_MODULE_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" \
          -DCMAKE_MODULE_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" \
          -DCMAKE_RC_FLAGS=\"-DWIN32\" \
          -DCMAKE_RC_FLAGS_DEBUG=\"-D_DEBUG\" \
          -DCMAKE_SHARED_LINKER_FLAGS=\"/machine:x64\" \
          -DCMAKE_SHARED_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" \
          -DCMAKE_SHARED_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" \
          -DCMAKE_STATIC_LINKER_FLAGS=\"/machine:x64\" \
          -DCMAKE_INSTALL_LIBDIR=lib \
          -DBUILD_INCREMENTAL_SOLVER=OFF \
          -DBUILD_DOCS=OFF \
          -DCMAKE_VERBOSE_MAKEFILE=OFF \
          -DBUILD_BENCHMARKS=OFF \
          -DBUILD_GEOSPATIAL=OFF \
          -DBUILD_DEMOS=OFF \
          -DBUILD_RTKLIB_CMD_LINE=OFF \
          -DBUILD_TESTS=OFF \
          -DENABLE_GPSTK=OFF \
          -DENABLE_SYNTHETIC_TESTS=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_INSTALL_PREFIX=${{ runner.workspace }}/vra_navigation_library \
          ..    
        cmake --build . --config $BUILD_TYPE 
        cmake --install . --config $BUILD_TYPE 

    - name: Create Build Environment
      working-directory: ${{ github.workspace }}
      run: cmake -E make_directory build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      # shell: bash
      working-directory: ${{ github.workspace }}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
          # -DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/vcpkg/scripts/buildsystems/vcpkg.cmake \
      run: 
        cmake  \
          -G \"Visual Studio 16 2019\"
          -A x64 \
          -DVCPKG_TARGET_TRIPLET=x64-windows \
          -DCMAKE_TOOLCHAIN_FILE=[vcpkg root]/vcpkg/scripts/buildsystems/vcpkg.cmake \
          -DASPN_INCLUDE_DIR=C:/DEV/aspn-v2-lcm-build-vra/cpp \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_CONFIGURATION_TYPES=$BUILD_TYPE \
          -DCMAKE_CXX_FLAGS=\"/DWIN32 /D_WINDOWS /W3 /GR /EHsc\" \
          -DCMAKE_CXX_FLAGS_RELEASE=\"/MD /O2 /Ob2 /DNDEBUG\" \
          -DCMAKE_CXX_FLAGS_DEBUG=\"/MDd /Zi /Ob0 /Od /RTC1\" \
          -DCMAKE_C_FLAGS=\"/DWIN32 /D_WINDOWS /W3\" \
          -DCMAKE_C_FLAGS_RELEASE=\"/MD /O2 /Ob2 /DNDEBUG\" \
          -DCMAKE_C_FLAGS_DEBUG=\"/MDd /Zi /Ob0 /Od /RTC1\" \
          -DCMAKE_EXE_LINKER_FLAGS=\"/machine:x64\" \
          -DCMAKE_EXE_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" \
          -DCMAKE_EXE_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" \
          -DCMAKE_MODULE_LINKER_FLAGS=\"/machine:x64\" \
          -DCMAKE_MODULE_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" \
          -DCMAKE_MODULE_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" \
          -DCMAKE_RC_FLAGS=\"-DWIN32\" \
          -DCMAKE_RC_FLAGS_DEBUG=\"-D_DEBUG\" \
          -DCMAKE_SHARED_LINKER_FLAGS=\"/machine:x64\" \
          -DCMAKE_SHARED_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" \
          -DCMAKE_SHARED_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" \
          -DCMAKE_STATIC_LINKER_FLAGS=\"/machine:x64\" \
          -DCMAKE_VERBOSE_MAKEFILE=OFF \
          -DCPACK_BINARY_IFW=ON \
          -DCPACK_BINARY_NSIS=OFF \
          -DCPACK_IFW_ROOT=${{ runner.workspace }}/Tools/QtInstallerFramework/4.0 \
          -DCPACK_IFW_VERBOSE=ON \
          -DCPACK_SOURCE_7Z=OFF \
          -DCPACK_SOURCE_ZIP=OFF \
          -DBUILD_TESTS=OFF \
          -DBUILD_SHARED_LIBS=ON \
          -DVRANavLib_DIR=C:/DEV/vra_navigation_library/CMake \
          .. 
              
    - name: Build Solution (windows)
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE 

    - name: Package Solution (windows)
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE -t PACKAGE

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: HelloWorld-Installer
        path: build/HelloWorld-Installer.exe
        retention-days: 5
