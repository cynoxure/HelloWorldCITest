name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
    #- uses: actions/checkout@v2
    - name: Checkout
      uses: actions/checkout@v1
      with:
          submodules: recursive

    # - name: Pull Repos
    #   # Use a bash shell so we can use the same syntax for environment variable
    #   # access regardless of the host operating system
    #   # shell: bash
    #   # ${{ runner.workspace }}
    #   working-directory: ${{ runner.workspace }}
    #   # Note the current convention is to use the -S and -B options here to specify source 
    #   # and build directories, but this is only available with CMake 3.13 and higher.  
    #   # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
    #   run: |
    #     git clone https://github.com/vethresearch/aspn-v2-lcm-build-vra.git 
    #     cd aspn-v2-lcm-build-vra
    #     git checkout -t remotes/origin/nativebuild

    - name: Installing vcpkg (windows)
      working-directory: ${{ runner.workspace }}
      run: |
        git clone https://github.com/Microsoft/vcpkg.git
        cd vcpkg
        git checkout 
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe install --triplet x64-windows date ceres[eigensparse] yaml-cpp lcm eigen3 libwebp pcre glib glog gflags glew glfw3 dirent
        .\vcpkg.exe install --triplet x64-windows opencv[png,jpeg,tiff,webp,eigen,nonfree,contrib]
#        .\vcpkg install --triplet x64-windows qt5[activeqt,core,declarative,imageformats,networkauth,svg,tools]  ;\

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      # shell: bash
      working-directory: ${{ github.workspace }}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake ${{ github.workspace }} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_TOOLCHAIN_FILE=${{ runner.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build Solution (windows)
      working-directory: ${{github.workspace}}/build
      run: cmake --build . --config $BUILD_TYPE 
