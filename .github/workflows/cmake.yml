name: CMake

on: [push]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  p1: ' -A x64 -DVCPKG_TARGET_TRIPLET=x64-windows '
  p3: ' -DCMAKE_CXX_FLAGS=\"/DWIN32 /D_WINDOWS /W3 /GR /EHsc\" -DCMAKE_CXX_FLAGS_RELEASE=\"/MD /O2 /Ob2 /DNDEBUG\" -DCMAKE_CXX_FLAGS_DEBUG=\"/MDd /Zi /Ob0 /Od /RTC1\" '
  p4: ' -DCMAKE_C_FLAGS=\"/DWIN32 /D_WINDOWS /W3\" -DCMAKE_C_FLAGS_RELEASE=\"/MD /O2 /Ob2 /DNDEBUG\" -DCMAKE_C_FLAGS_DEBUG=\"/MDd /Zi /Ob0 /Od /RTC1\" '
  p5: ' -DCMAKE_EXE_LINKER_FLAGS=\"/machine:x64\" -DCMAKE_EXE_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" -DCMAKE_EXE_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" '
  p6: ' -DCMAKE_MODULE_LINKER_FLAGS=\"/machine:x64\" -DCMAKE_MODULE_LINKER_FLAGS_RELEASE=\"/INCREMENTAL:NO\" -DCMAKE_MODULE_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" '
  p7: ' -DCMAKE_RC_FLAGS=\"-DWIN32\" -DCMAKE_RC_FLAGS_DEBUG=\"-D_DEBUG\"  -DCMAKE_SHARED_LINKER_FLAGS=\"/machine:x64\" -DCMAKE_SHARED_LINKER_FLAGS_RELEASE=\" /INCREMENTAL:NO \" '
  p8: ' -DCMAKE_SHARED_LINKER_FLAGS_DEBUG=\"/debug /INCREMENTAL\" -DCMAKE_STATIC_LINKER_FLAGS=\"/machine:x64\" -DCMAKE_VERBOSE_MAKEFILE=OFF '
  # p2: ' -DASPN_INCLUDE_DIR=C:/DEV/aspn-v2-lcm-build-vra/cpp '
  # p9: ' -DBUILD_GEOSPATIAL=OFF -DBUILD_DEMOS=OFF -DBUILD_RTKLIB_CMD_LINE=OFF -DENABLE_GPSTK=OFF -DENABLE_SYNTHETIC_TESTS=OFF '
  # p10: ' -DCPACK_BINARY_IFW=ON -DCPACK_BINARY_NSIS=OFF -DCPACK_IFW_VERBOSE=ON -DCPACK_SOURCE_7Z=OFF -DCPACK_SOURCE_ZIP=OFF '
  # p11: ' -DBUILD_TESTS=OFF -DBUILD_SHARED_LIBS=ON '

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-2019

    steps:
    #- uses: actions/checkout@v2
    - name: Checkout
      uses: actions/checkout@v1
      with:
          submodules: recursive

    - name: Download Doxygen
      working-directory: ${{ runner.workspace }}
      shell: pwsh
      run: |
        Invoke-WebRequest `
          -Uri "http://doxygen.nl/files/doxygen-1.8.20.windows.x64.bin.zip"  `
          -OutFile "doxygen-1.8.20.windows.x64.bin.zip"
        Expand-Archive `
          -Path "doxygen-1.8.20.windows.x64.bin.zip"  `
          -Destination "doxygen"
        Remove-Item doxygen-1.8.20.windows.x64.bin.zip

    - name: Download QtIFW
      working-directory: ${{ runner.workspace }}
      shell: pwsh
      run: |
        Invoke-WebRequest `
          -Uri "http://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_ifw/qt.tools.ifw.40/4.0ifw-win-x86.7z" `
          -OutFile "ifw-install.7z"
        7z x -o${{ runner.workspace }}\QtIFW ifw-install.7z
        Remove-Item ifw-install.7z
    
    - name: List
      working-directory: ${{ runner.workspace }}
      shell: pwsh
      run: |
        ls ${{ github.workspace }}
        ls ${{ github.workspace }}/vcpkg
        ls ${{ github.workspace }}/vcpkg/scripts/buildsystems

    - name: Bootstrap vcpkg 
      run: |
        ${{ github.workspace }}/vcpkg/bootstrap-vcpkg.bat

    # - name: Installing eigen (windows)
    #   working-directory: ${{ runner.workspace }}
    #   run: |
    #     C:\vcpkg\vcpkg.exe install --triplet x64-windows eigen3

    # - name: List
    #   working-directory: ${{ runner.workspace }}
    #   shell: pwsh
    #   run: |
    #     ls C:/vcpkg/scripts/buildsystems
    #     ls C:/vcpkg/installed/x64-windows/share/e*
    #     ls C:/vcpkg/installed/x64-windows/share/eigen3
    #     ls ${{ github.workspace }}
    #     ls ${{ runner.workspace }}
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC'
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/'
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/'
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx64/'
    #     ls 'C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.28.29333/bin/Hostx64/x64/'
    #     ls C:/
    #     ls 'C:/Program Files'

    - name: Create Build Environment
      working-directory: ${{ github.workspace }}
      run: |
        cmake -E make_directory ${{ github.workspace }}/release
        ls ${{ github.workspace }}

    - name: Configure CMake (Release)
      working-directory: ${{ github.workspace }}/release
      run: |
        cmake -DCMAKE_CONFIGURATION_TYPES=Release -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON $env:p1 $env:p3 $env:p4 $env:p5 $env:p6 $env:p7 $env:p8 -DCPACK_BINARY_IFW=ON -DCPACK_BINARY_NSIS=OFF -DCPACK_IFW_VERBOSE=ON -DCPACK_IFW_ROOT:PATH=${{ runner.workspace }}/QtIFW/Tools/QtInstallerFramework/4.0 .. 

    - name: Build Solution (Release)
      working-directory: ${{ github.workspace }}/release
      run: |
        cmake --build . --config Release 

    - name: Create Build Environment
      working-directory: ${{ github.workspace }}
      run: |
        cmake -E make_directory ${{ github.workspace }}/debug
        ls ${{ github.workspace }}

    - name: Configure CMake (Debug)
      working-directory: ${{ github.workspace }}/debug
      run: |
        cmake -DCMAKE_CONFIGURATION_TYPES=Debug -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=ON -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON $env:p1 $env:p3 $env:p4 $env:p5 $env:p6 $env:p7 $env:p8 -DCPACK_BINARY_IFW=ON -DCPACK_BINARY_NSIS=OFF -DCPACK_IFW_VERBOSE=ON -DCPACK_IFW_ROOT:PATH=${{ runner.workspace }}/QtIFW/Tools/QtInstallerFramework/4.0 .. 
            
    - name: Build Solution (Debug)
      working-directory: ${{ github.workspace }}/debug
      run: |
        cmake --build . --config Debug 

    - name: Package Solution (windows)
      if: ${{ success() }}
      working-directory: ${{github.workspace}}
      run: |
        cpack --verbose --config MultiCPackConfig.cmake 

    - name: 'Upload Artifact'
      uses: actions/upload-artifact@v2
      with:
        name: CMakeHelloWorld-Installer
        path: ${{github.workspace}}/*.exe
        retention-days: 5
