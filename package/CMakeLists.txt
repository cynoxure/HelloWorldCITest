cmake_minimum_required(VERSION 3.16)

find_package(Git QUIET)

# Packaging support
set(CPACK_PACKAGE_VENDOR "Cynoxure, LLC")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Hello Package")
set(CPACK_PACKAGE_VERSION_MAJOR ${PROJECT_VERSION_MAJOR}) # ${PROJECT_VERSION_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR ${PROJECT_VERSION_MINOR}) # ${PROJECT_VERSION_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH ${PROJECT_VERSION_PATCH}) # ${PROJECT_VERSION_PATCH})

set(CPACK_COMPONENTS_ALL HelloWorld HelloLib)
set(CPACK_COMPONENT_HELLOWORLD_DESCRIPTION
  "HelloWorld Description.")
set(CPACK_COMPONENT_HELLOLIB_DESCRIPTION
  "Hello Description.")

set(CPACK_COMPONENT_HELLOWORLD_DISPLAY_NAME
  "HelloWorld")
set(CPACK_COMPONENT_HELLOLIB_DISPLAY_NAME
  "Hello")

if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
    execute_process(
        COMMAND ${GIT_EXECUTABLE} log -1 --format=%h
        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_COMMIT_HASH
        OUTPUT_STRIP_TRAILING_WHITESPACE
    )
endif()

set( CPACK_PACKAGE_NAME "CMakeHelloWorld" )
message( STATUS "    CPack options: " ${CPACK_PACKAGE_NAME} )
message( STATUS "    Preparing CPACK: " )
message( STATUS "      and hash: ${GIT_COMMIT_HASH}" )

set( CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-Installer" )
#set( CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CMAKE_SYSTEM_NAME}" )
message(STATUS "Package File Name: ${CPACK_PACKAGE_FILE_NAME}")

set(CPACK_PACKAGE_INSTALL_DIRECTORY ${CPACK_PACKAGE_NAME})

include(CPack)